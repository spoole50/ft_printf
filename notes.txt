# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    notes.txt                                          :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: spoole <marvin@42.fr>                      +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/03/31 21:19:24 by spoole            #+#    #+#              #
#    Updated: 2019/03/31 21:19:25 by spoole           ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

Power of printf is flag system and avalible formatting

man 3 stdarg
    Function may be called with varying number of argumets of varying types

    #inlucde <stdarg.h> -> declares a type (va_list) and defines three macros 
    for stepping through a list of arguments whose number and types are not 
    known to the called function.

    void va_start(va_list ap, last);
    type va_arg(va_list ap, type);
    void va_copy(va_list dest, va_list src);
    void va_end(va_list ap);

    Called functon must declare an object of type va_list which is used by va_start(), va_arg(), va_copy(), va_end()

    va_start() macro must becalled first, initialized ap, which can be passed to va_arg() for each argument to be processed.
    va_end() signals that there are no further arguments and causes ap to be invalidated. If you call va_start()
    you should be calling va_end() within the same function.

    Parameter last is the name of the last parameter before the variable argument list
        the last paramter of which the calling function knows the type
    
    va_arg() expands to an expression that has the type and value of the next argument in the call.
    paramter ap is the va_list ap initilaized by va_start(). Each call to va_arg() modifies ap so that the next call
    returns the next argument. The parmaeter type is a type name specified so that the type of a pointer to an object that has
    the specified type can be obtained simply by adding '*' to type.

    If there is no argument or if type is not compatible with the type of the actual next argument, random errors will occur

man 3 printf:
	int printf(const char * restrict format, ...); #prototype
	
		Format string
			composed of zero or more directives:
				ordinary characters (not %), which are copied unchanged to the output stream
				Conversion Specifications -> each os which results in fetching zero or more subsequent ARGUMENTS
					Introduced by the % symbol
					Arguments must correspond properly (after type promotion) with the conversion specifier
					After the % the following appear in sequence:

						1.An optional field, consisting of a decimal digit string followed by a $, specifying the next argument to access.
							If this field is not provided the argument following the last argument accessed will be used
							Arguments are numbered starting at 1
							If unaccessed arguments in the format string are interespersed with ines that are accessed the results will be indetermienate
						
						2.Zero or more of the following flags:
							# 		- The value should be converted to an "alternative form"
										For c, d, i, n, p, s, and u conversions this option has no effect.
										For o conversions the precision of the number is increased to force the first character of the output string to a zero
										For x and X conversions, a non-zero result has the string '0x' or (0X) prepeneded to it.
										For a,A,e,E,f,F,g,G conversions, the result will always contain a decimal point, even if no digits follow
											for g and G tailing zeros are not removed from the result as they otherwise would be
							0 		- Zero padding
										For all conversion except n, the converted value is padded on the left with zeros rather than blanks.
										If a precision is given with a numeric conversion(d,i,o,u,x,X) the 0 flag is ignored
							- 		- negative field width flag
										The converted value is to be left adjusted on the filed boundry.
										Excpet for n conversions, the converted value is padded on the right with blanks, rather than on the left with blanks or zeros
										A - overrrides a 0 if both are given
							' '		-(space) blank should be left before a positive number produced by a signed conversion (a, A, d, e, E, f, F, g, G, i)
							+ 		- a sign must always be placed before a number produced by a signed conversion
										A + overrides a space if both are used
							''' 	-(apostrophe) decimal conversions (d, u, i) or the integral portion of a floating point conversion (f or F) should be grouped and separated by thousands using the non-monetary separtor returned by localeconv(3)

						3. Optional separator character (, | ; | : | _) used for separating multiple values when printing an AltiVec ot SSE vector, or other multivalue unit

						4. Optional decimal digit string specifying a minimum field width
							IF the converted value has fewer characters than the field width, it will be padded with spaces from the left (or right, if "-" flag included)
						
						5. Optioanl precision in the form of a period "." followed with optional digit string
							If digit string is omiited, the precision is taken as zero
							Gives the minimum number of digits to appear for d,i,o,u,x,X conversions
							Gives number of digits to appear after the decimal point for a,A,e,E,f,F conversions
							Gives max number of significant digits for g and G 
							Gives max number of characters to be printed for s conversions

						6. Optional length modifier
							Specifies the size of the argument 
								Modifier          d, i           o, u, x, X            n
								hh                signed char    unsigned char         signed char *
								h                 short          unsigned short        short *
								l (ell)           long           unsigned long         long *
								ll (ell ell)      long long      unsigned long long    long long *
								j                 intmax_t       uintmax_t             intmax_t *
								t                 ptrdiff_t      (see note)            ptrdiff_t *
								z                 (see note)     size_t                (see note)
								q (deprecated)    quad_t         u_quad_t              quad_t *

								Modifier    a, A, e, E, f, F, g, G
								l (ell)     double (ignored, same behavior as without it)
								L           long double

								Modifier    c         s
								l (ell)     wint_t    wchar_t *

								The AltiVec Technology Programming Interface Manual also defines five additional length modifiers which can be used (in place of the conven-
								tional length modifiers) for the printing of AltiVec or SSE vectors:
								v           Treat the argument as a vector value, unit length will be determined by the conversion specifier (default = 16 8-bit units for
											all integer conversions, 4 32-bit units for floating point conversions).
								vh, hv      Treat the argument as a vector of 8 16-bit units.
								vl, lv      Treat the argument as a vector of 4 32-bit units.

						7. A character that specifies the type of conversion to be applied
								A field width or precision, or both, may be indicated by an asterisk `*' or an asterisk followed by one or more decimal digits and a `$' instead
								of a digit string.  In this case, an int argument supplies the field width or precision.  A negative field width is treated as a left adjustment
								flag followed by a positive field width; a negative precision is treated as though it were missing.  If a single format directive mixes posi-
								tional (nn$) and non-positional arguments, the results are undefined.

								diouxX	-	int argument is converted to signed decimal (d and i), unsigned octal, unsigned decimal (u), or unsigned hexadecimal (x and X)
												The precision if any gives minimum number of digits that must appear; if the converted value requires fewer digits, it is padded on the left with zeros
								
								DOU		-	The long int argument is converted to a signed decimal, unsigned octal, or unsigned decimal as if the format had been ld, lo, or lu
												These conversions characters are deprecated

								eE		-	The double argument is rounded and converted in the style [-]d.ddde+-dd where there is one digit before the decimal point character and the number of digits after is equal to the precision
												if the precision is missing it is taken as 6
												if the precision is zero no decimal point chater appears
												E conversion uses letter E vs e
												The exponenet always contains at least two digits if the value is zero the exponent is 00

								fF		-	the double argument is rounded and converted to a decimal notation style [-]ddd.ddd
												The number of digits after the decimal point character is equal to the precision specifications
												If the precision is missing it is taken as 6
												If precision is explicitly 0 no decimal point characters appear
												If decimal point appears at least one number comes before it

								gG		-	the double argument is converted in style f or e (F, E for G) The precision specifies the number of significant digits
												If the precision is missing 6 digits are given
												If the precision is zero it is treated as 1
												Style e is used if the exponent from its conversion is less than -4 or greater than or equal to the precision
												Trailing zeros are remeoved from the fractional part of the result
												A decimal point only appears if it is followed by at least one digit

								aA		-	The double argument is rounded and converted to hexadecimal notation in the style [-])0xh.hhhp[+-]d
												Where the number of digits after the hexadecimal point character is equal to the precision specifications
												If the precision is missing it is taken as enough to represent the floating point number exactly
												If precision is zero no hexadecimal point character appears
												'p' is literal character p and the exponent consists of a positive or negative sign followed by a decimal number represeting an exponent of 2

								C		-	Treated as c with l (ell) modifier

								c		-	The int argument is convrted to an unsigned char and resulting character written
												If the l (ell) modifier is used wint_t argument converted to wchar_t 

								S		-	Treated as s with l (ell) modifier
								
								s		-	The char* argument is expected to be a pointer to an array of characters.
												characters from the array are written up to but includeing nul character
												If a precision is specified no more than the nuber specified are written
												If a precision is given no null character need be present
												If the precision is not specified or is greater than the size of the array, the array must conatin a terminating character

								P		-	The void* pointer argument is printed in hexadecimal

								n		-	The number of characters written so far is stored into the integer indicated by the int* pointer argument 

								%		-	A % is written, no argument is converted

		Return Value
			Return the numbers of characters printed (not including the trailing \0) 
			Return negative value if an error occurs
								

	csp (Char, string, pointers)
    diouxX conversion with hh, h, l, and ll flags
    f converson with l and L flags
    Manage %%
    Manage flags #0-+
    Manage minimum field-width
    Manage Precision